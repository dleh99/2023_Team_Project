int modelMeshFilters.Length;	// 모델 개수

#################################
int verticesLength;		// 정점 개수
=============================
float vertices[i].x;		// 정점 벡터 x
float vertices[i].y;		// 정점 벡터 y
float vertices[i].z;		// 정점 벡터 z
(verticesLength 만큼 반복)
=============================
int normalsLength;		// 노말 개수
=============================
float normals[i].x;		// 노멀 벡터 x
float normals[i].y;		// 노멀 벡터 y
float normals[i].z;		// 노멀 벡터 z
(normalsLength 만큼 반복)
=============================
int tangentsLenth;		// 탄젠트 개수
=============================
float tangents[i].x;		// 탄젠트 벡터 x
float tangents[i].y;		// 탄젠트 벡터 y
float tangents[i].z;		// 탄젠트 벡터 z
(tangentsLenth 만큼 반복)
=============================
int uv0Length;		// uv 개수
float uv.x;			// uv 좌표 x
float uv.y;			// uv 좌표 y
(uv0Length 만큼 반복)
#################################

# 사이의 데이터들을 전부 읽으면 모델 1개의 정보
따라서 modelMeshFilters.Length(모델 개수)만큼 반복하면 모든 모델의 정보를 읽음

다음은 binary 파일을 write 할 때 작성한 코드

binaryWriter = new BinaryWriter(File.Open("player model data.bin", FileMode.Create));

binaryWriter.Write(modelMeshFilters.Length);
for (int i = 0; i < modelMeshFilters.Length; ++i)
{
        int verticesLength = modelMeshFilters[i].mesh.vertices.Length;
        int normalsLength = modelMeshFilters[i].mesh.normals.Length;
        int tangentsLength = modelMeshFilters[i].mesh.tangents.Length;
        int uv0Length = modelMeshFilters[i].mesh.uv.Length;

        binaryWriter.Write(verticesLength);
        for (int j = 0; j < verticesLength; ++j)
        {
            binaryWriter.Write(modelMeshFilters[i].mesh.vertices[j].x);
            binaryWriter.Write(modelMeshFilters[i].mesh.vertices[j].y);
            binaryWriter.Write(modelMeshFilters[i].mesh.vertices[j].z);
        }

        binaryWriter.Write(normalsLength);
        for (int j = 0; j < normalsLength; ++j)
        {
            binaryWriter.Write(modelMeshFilters[i].mesh.normals[j].x);
            binaryWriter.Write(modelMeshFilters[i].mesh.normals[j].y);
            binaryWriter.Write(modelMeshFilters[i].mesh.normals[j].z);
        }

        binaryWriter.Write(tangentsLength);
        for (int j = 0; j < tangentsLength; ++j)
        {
            binaryWriter.Write(modelMeshFilters[i].mesh.tangents[j].x);
            binaryWriter.Write(modelMeshFilters[i].mesh.tangents[j].y);
            binaryWriter.Write(modelMeshFilters[i].mesh.tangents[j].z);
        }

        binaryWriter.Write(uv0Length);
        for (int j = 0; j < uv0Length; ++j)
        {
            binaryWriter.Write(modelMeshFilters[i].mesh.uv[j].x);
            binaryWriter.Write(modelMeshFilters[i].mesh.uv[j].y);
        }
}
binaryWriter.Close();

